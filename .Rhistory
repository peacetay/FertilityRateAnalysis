if(!require(p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
# ----- Importing data
getwd()
dfken <- dfken[,c(1,2,3,4,5,6,49,7:47)]
WB <- read.csv(file.path(data_dir,"Final projectv2.csv"))
IMF <- read.csv(file.path(data_dir,"IMF.csv"))
# ------ Merging Data
dfken <- merge(WB,IMF,"Country.Code")
dfken <- dfken[,c(1,2,3,4,5,6,49,7:47)]
# ----- Renaming Columns and removing columns that are not needed
names(dfken) <- c("Country.Code","Indicator","Indcode","Country","Region","Income","IMF", as.character(1980:2020))
dfken$Indcode <- NULL
# ----- Melt years
dfken <- melt(dfken, c("Indicator","Country","Region","Income","IMF"), 7:(ncol(dfken)-1), variable_name = "Year", value.name = "Value")
dfken$Value <- as.numeric(dfken$Value)
# ----- Cast data frame
dfken <- dcast(dfken, Country+Region+Income+IMF+variable~Indicator, value.var = "Value")
names(dfken)[names(dfken) == 'variable'] <- 'Year'
# ----- Rename columns
names(dfken) <- c("Country","Region","Income","IMF","Year","Fertility","GDP","LifeExp","Mortrate","Population","Edu")
# ----- Define regions vector
regions <- sort(as.vector(unique(dfken$Region)))
regions <- append(regions, "All", 0)
# ----- Define countries vector
countries <- sort(as.vector(unique(dfken$Country)))
# ----- Remove NA
dfken <- dfken[complete.cases(dfken), ]
dfken <- dfken[!(is.na(dfken) | dfken==""), ]
##Data for Emerging and Developing Economies
require(plyr)
df.emerg<-dfken
df.emerg<-filter(df.emerg,IMF=='Emerging and Developing Economies')
func1 <- function(df.emerg)
{
return(data.frame(Life_Expectancy= abs(cor(df.emerg$LifeExp, df.emerg$Fertility))))
}
r_LifeExp<-ddply(df.emerg, .(Country), func1)
func2 <- function(df.emerg)
{
return(data.frame(GDP = abs(cor(df.emerg$GDP, df.emerg$Fertility))))
}
r_GDP<-ddply(df.emerg, .(Country), func2)
func3 <- function(df.emerg)
{
return(data.frame(Education = abs(cor(df.emerg$Edu, df.emerg$Fertility))))
}
r_Edu<-ddply(df.emerg, .(Country), func3)
r1<-merge(r_LifeExp,r_GDP,by="Country")
r2<-merge(r1,r_Edu,by="Country")
corr.emer<-na.omit(r2)
emer.countries <- sort(as.vector(unique(corr.emer$Country)))
rownames(corr.emer)<-corr.emer$Country
corr.emer<-corr.emer[,!names(corr.emer) %in% c("Country")]
##Data for Advanced Economies
require(plyr)
df.adv<-dfken
df.adv<-filter(df.adv,IMF=='Advanced Economies')
funct1 <- function(df.adv)
{
return(data.frame(Life_Expectancy= abs(cor(df.adv$LifeExp, df.adv$Fertility))))
}
cr_LifeExp<-ddply(df.adv, .(Country), funct1)
funct2 <- function(df.adv)
{
return(data.frame(GDP = abs(cor(df.adv$GDP, df.adv$Fertility))))
}
cr_GDP<-ddply(df.adv, .(Country), funct2)
funct3 <- function(df.adv)
{
return(data.frame(Education = abs(cor(df.adv$Edu, df.adv$Fertility))))
}
cr_Edu<-ddply(df.adv, .(Country), funct3)
cr1<-merge(cr_LifeExp,cr_GDP,by="Country")
cr2<-merge(cr1,cr_Edu,by="Country")
corr.adv<-na.omit(cr2)
adv.countries <- sort(as.vector(unique(corr.adv$Country)))
rownames(corr.adv)<-corr.adv$Country
corr.adv<-corr.adv[,!names(corr.adv) %in% c("Country")]
life_exp<-read.csv(file.path(data_dir,"life_expV2.csv"))
fertility<-read.csv(file.path(data_dir,"fertilityV2.csv"))
GDP<-read.csv(file.path(data_dir,"GDPV2.csv"))
Edu <-read.csv(file.path(data_dir,"EduV2.csv"))
names(life_exp) <- gsub("X", "Year_", names(life_exp))
names(fertility) <- gsub("X", "Year_", names(fertility))
names(GDP) <- gsub("X", "Year_", names(GDP))
names(Edu) <- gsub("X", "Year_", names(Edu))
Pop_Age <- read.csv("Population by Age, Sex.csv")
Pop_Age <- read.csv(file.path(data_dir,"Population by Age, Sex.csv"))
UNMethod <- read.csv(file.path(data_dir,"UNSD - Methodology.csv"))
# ----- Pop_Age: Renaming Columns and removing columns that are not needed
Pop_Age <- select(Pop_Age, -c(3,4,6,8,9))
names(Pop_Age) <- c("LocID", "Country", "Year", "AgeGroup", "PopMale", "PopFemale", "PopTotal")
# ----- Cleaning Pop_Age LocID
temp_vec <- Pop_Age$LocID
Pop_Age$LocID <- sprintf("%03d", temp_vec)
# ----- UNMethod: Renaming Columns and removing columns that are not needed
UNMethod <- select(UNMethod,-c(1,2,3,5,7,8,9,13, 14,15))
names(UNMethod) <- c("Region", "SubRegion", "LocID", "ISO_Alpha2", "ISO_Alpha3")
# ----- Cleaning Data of UNMethod
UNMethod$LocID[UNMethod$ISO_Alpha2 == 535] <- 535
UNMethod$LocID[UNMethod$ISO_Alpha2 == 344] <- 344
UNMethod$LocID[UNMethod$ISO_Alpha2 == 446] <- 446
UNMethod$ISO_Alpha2[UNMethod$ISO_Alpha3 == 'BQ'] <- 'BQ'
UNMethod$ISO_Alpha2[UNMethod$ISO_Alpha3 == 'HK'] <- 'HK'
UNMethod$ISO_Alpha2[UNMethod$ISO_Alpha3 == 'MO'] <- 'MO'
UNMethod$ISO_Alpha3[UNMethod$temp == 'BES'] <- 'BES'
UNMethod$ISO_Alpha3[UNMethod$temp == 'HKG'] <- 'HKG'
UNMethod$ISO_Alpha3[UNMethod$temp == 'MAC'] <- 'MAC'
# ------ Merging UNMethod with Pop_Age
temp_df <- unique(UNMethod[,c("LocID", "ISO_Alpha2", "ISO_Alpha3", "Region", "SubRegion")])
Pop_Age <- merge(x = Pop_Age, y = UNMethod, by = "LocID")
# ------ Reordering Columns in Pop_Age
Pop_Age <- Pop_Age[,c("LocID", "ISO_Alpha2", "ISO_Alpha3", "Country", "Region", "SubRegion", "Year", "AgeGroup", "PopMale", "PopFemale", "PopTotal")]
# ------ Removing lines without LocID, ISO_Alpha2, ISO_Alpha3 from Pop_Age
Pop_Age <- subset(Pop_Age, LocID != "" & ISO_Alpha2 != "" & ISO_Alpha3 != "")
# ----- Removing Aprostrophe from Country Names
Pop_Age$Country<-gsub("'","",as.character(Pop_Age$Country))
# ----- Age Group Vector
AgeGroup_vec <- c("0-4", "5-9", "10-14", "15-19", "20-24",
"25-29", "30-34", "35-39", "40-44", "45-49",
"50-54", "55-59", "60-64", "65-69", "70-74",
"75-79", "80-84", "85-89", "90-94", "95-99", "100+")
WB1 <- read.csv("Final project.csv")
WB1 <- read.csv(file.path(data_dir,"Final project.csv"))
IMF1 <- read.csv(file.path(data_dir,"IMF.csv"))
# ------ Merging Data
df <- merge(WB1,IMF1,"Country.Code")
df <- df[,c(1,2,3,4,5,6,49,7:47)]
# ----- Renaming Columns and removing columns that are not needed
names(df) <- c("Country.Code","Indicator","Indcode","Country","Region","Income","IMF", as.character(1980:2020))
df$Indcode <- NULL
# ----- Melt years
df <- melt(df, c("Indicator","Country","Region","Income","IMF"), 7:(ncol(df)-1), variable_name = "Year", value.name = "Value")
df$Value <- as.numeric(df$Value)
# ----- Cast data frame
df <- dcast(df, Country+Region+Income+IMF+variable~Indicator, value.var = "Value")
names(df)[names(df) == 'variable'] <- 'Year'
# ----- Rename columns
names(df) <- c("Country","Region","Income","IMF","Year","Fertility","GDP","LifeExp","Mortrate","Population")
# ----- Define regions vector
regions <- sort(as.vector(unique(df$Region)))
regions <- append(regions, "All", 0)
# ----- Define countries vector
countries <- sort(as.vector(unique(df$Country)))
# ----- Remove NA
df <- df[complete.cases(df), ]
df <- df[!(is.na(df) | df==""), ]
#Years Range
projected_years <- seq(2020,2050)
projected_years_length <- length(projected_years)
########################### EMERGING COUNTRIES ###########################################
#Emerging and Developing Economies
emerging <-cbind(df) %>%
filter(IMF %in% c('Emerging and Developing Economies')) %>%
group_by(Year) %>%
summarize_at(vars(Fertility), list(name = mean))
colnames(emerging)[2] <- 'Mean'
#emerging$IMF <- 'Emerging and Developing Economies'
# to find length of projected years
emerging_year <-as.numeric(as.character(emerging$Year))
emerging_year_number <- as.numeric(emerging$Year)
len_emerge_actual_year <- length(emerging_year_number)
##################        LINEAR        ########################
fit_linear <- lm(emerging$Mean ~ emerging_year_number)
mod_summary_linear <- summary(fit_linear)
# search for intercept and gradient
emerging_intercept_linear <- mod_summary_linear$coefficients[1,1]
emerging_gradient_linear <- mod_summary_linear$coefficients[2,1]
# to get projected values
projected_emerge_mean_linear <- vector(mode = "numeric", length = projected_years_length)
for(i in (len_emerge_actual_year+1):(len_emerge_actual_year+projected_years_length)){
projected_emerge_mean_linear[i-len_emerge_actual_year] <- (emerging_gradient_linear * i) + emerging_intercept_linear
}
#place projected values into dataframe
projected_emerging_df_linear <- data.frame(projected_years,projected_emerge_mean_linear)
#change to similar column name
names(projected_emerging_df_linear)[1] <- "Year"
names(projected_emerging_df_linear)[2] <- "Mean"
#change to character so as to be able to append to original df
projected_emerging_df_linear$Year <- as.character(projected_emerging_df_linear$Year)
#append to orginal file
final_emerging_df_linear <- rbind(emerging,projected_emerging_df_linear)
final_emerging_df_linear$IMF <- 'Emerging and Developing Economies'
##################        LINEAR        ########################
##################        EXPONENTIAL   ########################
fit_expo <- lm(log(emerging$Mean) ~ emerging_year_number)
mod_summary_expo <- summary(fit_expo)
# search for intercept and gradient
emerging_intercept_expo <- mod_summary_expo$coefficients[1,1]
emerging_gradient_expo <- mod_summary_expo$coefficients[2,1]
# to get projected values
projected_emerge_mean_expo <- vector(mode = "numeric", length = projected_years_length)
for(i in (len_emerge_actual_year+1):(len_emerge_actual_year+projected_years_length)){
projected_emerge_mean_expo[i-len_emerge_actual_year] <- exp((emerging_gradient_expo * i) + emerging_intercept_expo)
}
#place projected values into dataframe
projected_emerging_df_expo <- data.frame(projected_years,projected_emerge_mean_expo)
#change to similar column name
names(projected_emerging_df_expo)[1] <- "Year"
names(projected_emerging_df_expo)[2] <- "Mean"
#change to character so as to be able to append to original df
projected_emerging_df_expo$Year <- as.character(projected_emerging_df_expo$Year)
#append to orginal file
final_emerging_df_expo <- rbind(emerging,projected_emerging_df_expo)
final_emerging_df_expo$IMF <- 'Emerging and Developing Economies'
advanced <-cbind(df) %>%
filter(IMF %in% c('Advanced Economies')) %>%
group_by(Year) %>%
summarize_at(vars(Fertility), list(name = mean))
colnames(advanced)[2] <- "Mean"
#advanced$IMF <- 'Advanced Economies'
# to find length of projected years
advanced_year <-as.numeric(as.character(advanced$Year))
advanced_year_number <- as.numeric(advanced$Year)
len_advanced_actual_year <- length(advanced_year_number)
##################        LINEAR        ########################
fit2_linear <- lm(advanced$Mean ~ advanced_year_number)
mod_summary2_linear <- summary(fit2_linear)
# search for intercept and gradient
advanced_intercept_linear <- mod_summary2_linear$coefficients[1,1]
advanced_gradient_linear <- mod_summary2_linear$coefficients[2,1]
# to get projected values
projected_advanced_mean_linear <- vector(mode = "numeric", length = projected_years_length)
for(i in (len_advanced_actual_year+1):(len_advanced_actual_year+projected_years_length)){
projected_advanced_mean_linear[i-len_advanced_actual_year] <- (advanced_gradient_linear * i) + advanced_intercept_linear
}
#place projected values into dataframe
projected_advanced_df_linear <- data.frame(projected_years,projected_advanced_mean_linear)
#change to similar column name
names(projected_advanced_df_linear)[1] <- "Year"
names(projected_advanced_df_linear)[2] <- "Mean"
#change to character so as to be able to append to original df
projected_advanced_df_linear$Year <- as.character(projected_advanced_df_linear$Year)
#append to orginal file
final_advanced_df_linear <- rbind(advanced,projected_advanced_df_linear)
final_advanced_df_linear$IMF <- 'Advanced Economies'
##################        LINEAR        ########################
##################        EXPONENTIAL   ########################
fit2_expo <- lm(log(advanced$Mean) ~ advanced_year_number)
mod_summary2_expo <- summary(fit2_expo)
# search for intercept and gradient
advanced_intercept_expo <- mod_summary2_expo$coefficients[1,1]
advanced_gradient_expo <- mod_summary2_expo$coefficients[2,1]
# to get projected values
projected_advanced_mean_expo <- vector(mode = "numeric", length = projected_years_length)
for(i in (len_advanced_actual_year+1):(len_advanced_actual_year+projected_years_length)){
projected_advanced_mean_expo[i-len_advanced_actual_year] <- exp((advanced_gradient_expo * i) + advanced_intercept_expo)
}
#place projected values into dataframe
projected_advanced_df_expo <- data.frame(projected_years,projected_advanced_mean_expo)
#change to similar column name
names(projected_advanced_df_expo)[1] <- "Year"
names(projected_advanced_df_expo)[2] <- "Mean"
#change to character so as to be able to append to original df
projected_advanced_df_expo$Year <- as.character(projected_advanced_df_expo$Year)
#append to orginal file
final_advanced_df_expo <- rbind(advanced,projected_advanced_df_expo)
final_advanced_df_expo$IMF <- 'Advanced Economies'
#create data frame with 0 rows and 3 columns
final_country_df2_linear <- data.frame(matrix(ncol = 3, nrow = 0))
final_country_df2_expo <- data.frame(matrix(ncol = 3, nrow = 0))
#provide column names
colnames(final_country_df2_linear) <- c('Year', 'Fertility', 'Country')
colnames(final_country_df2_expo) <- c('Year', 'Fertility', 'Country')
for (c in countries) {
input_country <- c
countrytoplot <- cbind(df) %>%
filter(Country %in% c(input_country))
if (input_country != 'Aruba' && input_country != 'Hong Kong SAR, China' && input_country != 'Kosovo' && input_country != 'Macao SAR, China'
&& input_country != 'Nauru' && input_country != 'Puerto Rico'&& input_country != 'Tuvalu' ){
#frpxvalue1 <- countrytoplot$Year
#frpyvalue1 <- countrytoplot$Fertility
countrytoplot2 <- data.frame(countrytoplot$Year,countrytoplot$Fertility)
#countrytoplot2$Country <- input_country
names(countrytoplot2)[1] <- "Year"
names(countrytoplot2)[2] <- "Fertility"
# if 1 row cant do projection
if (nrow(na.omit(countrytoplot2)) != 1) {
# to find length of projected years
country_year <-as.numeric(as.character(countrytoplot2$Year))
country_year_number <- as.numeric(countrytoplot2$Year)
#len_country_actual_year <- length(country_year_number)
# To counter missing data in between
len_country_actual_year <- 2019- as.numeric(as.character(countrytoplot2[1,1])) +1
##################        LINEAR        ########################
fit3_linear <- lm(countrytoplot2$Fertility ~ country_year_number)
mod_summary3_linear <- summary(fit3_linear)
# search for intercept and gradient
country_intercept_linear <- mod_summary3_linear$coefficients[1,1]
country_gradient_linear <- mod_summary3_linear$coefficients[2,1]
# to get projected values
projected_country_mean_linear <- vector(mode = "numeric", length = projected_years_length)
for(i in (len_country_actual_year+1):(len_country_actual_year+projected_years_length)){
projected_country_mean_linear[i-len_country_actual_year] <- (country_gradient_linear * i) + country_intercept_linear
}
#place projected values into dataframe
projected_country_df_linear <- data.frame(projected_years,projected_country_mean_linear)
#projected_country_df$Country <- input_country
#change to similar column name
names(projected_country_df_linear)[1] <- "Year"
names(projected_country_df_linear)[2] <- "Fertility"
#change to character so as to be able to append to original df
projected_country_df_linear$Year <- as.character(projected_country_df_linear$Year)
#append to orginal file
final_country_df_linear <- rbind(countrytoplot2,projected_country_df_linear)
final_country_df_linear$Country <- input_country
final_country_df2_linear <-rbind(final_country_df2_linear,final_country_df_linear)
##################        LINEAR        ########################
##################        EXPONENTIAL   ########################
fit3_expo <- lm(log(countrytoplot2$Fertility) ~ country_year_number)
mod_summary3_expo <- summary(fit3_expo)
# search for intercept and gradient
country_intercept_expo <- mod_summary3_expo$coefficients[1,1]
country_gradient_expo <- mod_summary3_expo$coefficients[2,1]
# to get projected values
projected_country_mean_expo <- vector(mode = "numeric", length = projected_years_length)
for(i in (len_country_actual_year+1):(len_country_actual_year+projected_years_length)){
projected_country_mean_expo[i-len_country_actual_year] <- exp((country_gradient_expo * i) + country_intercept_expo)
}
#place projected values into dataframe
projected_country_df_expo <- data.frame(projected_years,projected_country_mean_expo)
#projected_country_df$Country <- input_country
#change to similar column name
names(projected_country_df_expo)[1] <- "Year"
names(projected_country_df_expo)[2] <- "Fertility"
#change to character so as to be able to append to original df
projected_country_df_expo$Year <- as.character(projected_country_df_expo$Year)
#append to orginal file
final_country_df_expo <- rbind(countrytoplot2,projected_country_df_expo)
final_country_df_expo$Country <- input_country
final_country_df2_expo <-rbind(final_country_df2_expo,final_country_df_expo)
##################        EXPONENTIAL   ########################
}
}
}
shinyApp(ui, server)
ui <- navbarPage("Population Study",
theme = "https://bootswatch.com/3/united/bootstrap.min.css",
tabPanel("World Map",
sidebarLayout(
sidebarPanel( width = 3,
h3("Select Inputs"),
helpText("Select a year to visualise the data"),
h3("\n"),
#tags$hr(),
selectInput('year', 'Pick a Year', c(1980:2019), selected=2019),
#tags$hr(),
tags$b("World Average Fertility Rate"),
verbatimTextOutput("txt_f"),
#tags$hr(),
tags$b("World Average Life Expectancy"),
verbatimTextOutput("txt_lf"),
#tags$hr(),
tags$b("World Average GDP per capita (USD)"),
verbatimTextOutput("txt_gdp"),
#tags$hr(),
tags$b("World Average Secondary School Enrollment"),
verbatimTextOutput("txt_edu"),
#tags$hr(),
helpText("Source: http://data.worldbank.org.
Note that some values for some years are missing.")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Fertility", br(), plotlyOutput("plot_f")),
tabPanel("GDP per capita", br(), plotlyOutput("plot_gdp")),
tabPanel("Secondary School Enrollment ", br(), plotlyOutput("plot_edu")),
tabPanel("Life Expectancy ", br(), plotlyOutput("plot_lf"))
)
)
)
),
tabPanel("Fertility Rate Projections",
sidebarLayout(
sidebarPanel(width = 3,
h3("Select Inputs"),
helpText("Please select Countries"),
h3("\n"),
selectInput("variable_frp1", "Country:",choices = unique(df$Country)),
sliderInput("frpyear", "Year:", min = 1980, max = 2050, value = c(1980,2050), sep = "", width = '100%')
),
mainPanel(
fluidPage(
fluidRow(
tabsetPanel(
tabPanel("Overview",
splitLayout(cellWidths = c("50%", "50%"), plotOutput("fertilitypto_plot1"), plotOutput("fertilitypto_plot2"))
)
)
)
)
)
)
),
tabPanel("Population Projections",
sidebarLayout(
sidebarPanel(width = 3,
h3("Select Inputs"),
helpText("Please select Region, Sub Region and Country"),
h3("\n"),
uiOutput("Bar_Region"),
uiOutput("Bar_SubRegion"),
uiOutput("Bar_Country"),
sliderInput(inputId = "Bar_Year",
label = "Select Year",
min = 1980,
max = 2050,
value = min(Pop_Age$Year),
step = 1,
width = "100%",
animate = animationOptions(interval = 200)),
helpText("Source: https://population.un.org/ ")
),
mainPanel(
fluidPage(
fluidRow(
tabsetPanel(
tabPanel("Bar Chart",
box(width = 12,
h4("Bar Chart"),
plotOutput(outputId = "barplot"))
),
tabPanel("Table",
box(width = 12,
h4("Table"),
DT::dataTableOutput("Pop_Age_subset")
)
)
)
)
)
)
)
),
tabPanel("Development Indicators vs Fertility Rate",
sidebarLayout(
sidebarPanel(width = 3,
h3("Select Inputs"),
helpText("Please select Developed or Developing Economies"),
h3("\n"),
selectInput("IMF1", label = ("Select"),
choices = list("All" = "All", "Emerging and Developing Economies" = "Emerging and Developing Economies", "Advanced Economies" = "Advanced Economies"), selected = 1),
sliderInput("yearken", label = "Select Year",
min = 1980,
max = 2018,
value = 1980,
sep = "",
width = "100%",
animate = animationOptions(interval = 750))
),
mainPanel(
fluidPage(
fluidRow(
tabsetPanel(
tabPanel("GDP Per Capita",
box(width = 12,
h4("GDP per capita vs Fertility Rate"),
plotOutput(outputId = "GDP_plot", hover = hoverOpts("plot_hover", delay = 100 , delayType = "debounce")),
uiOutput("hover_info"))
),
tabPanel("Secondary School Enrollment",
box(width = 12,
h4("Secondary School Enrollment (Gross %) vs Fertility Rate"),
plotOutput(outputId = "Edu_plot", hover = hoverOpts("plot_hover4", delay = 100 , delayType = "debounce")),
uiOutput("hover_info4"))
),
tabPanel("Life Expectancy",
box(width = 12,
h4("Life Expectancy vs Fertility Rate"),
plotOutput(outputId = "LE_plot", hover = hoverOpts("plot_hover2", delay = 100 , delayType = "debounce")),
uiOutput("hover_info2"))
),
tabPanel("Mortality Rate",
box(width = 12,
h4("Mortality Rate vs Fertility Rate"),
plotOutput(outputId = "MR_plot", hover = hoverOpts("plot_hover3", delay = 100 , delayType = "debounce")),
uiOutput("hover_info3"))
)
)
)
)
)
)
),
tabPanel("Correlation",
sidebarLayout(
sidebarPanel(width = 3,
h3("Select Inputs"),
helpText("Please select Advanced Countries"),
h3("\n"),
selectInput("var_adv", "Advanced Country:",choices = adv.countries),
helpText("Please select Developing Countries"),
h3("\n"),
selectInput("var_emer", "Emerging & Developing Country:",choices = emer.countries),
),
mainPanel(
fluidPage(
fluidRow(
tabsetPanel(
tabPanel("Absolute Correlation with Fertility Rate",
splitLayout(cellWidths = c("50%", "50%"), plotOutput("Radar"), plotOutput("Radar1"))
)
)
)
)
)
)
)
